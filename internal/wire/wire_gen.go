// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/rakhiazfa/gin-boilerplate/internal/handlers"
	"github.com/rakhiazfa/gin-boilerplate/internal/infrastructures"
	"github.com/rakhiazfa/gin-boilerplate/internal/repositories"
	"github.com/rakhiazfa/gin-boilerplate/internal/services"
	"github.com/rakhiazfa/gin-boilerplate/pkg/utils"
	"github.com/rakhiazfa/gin-boilerplate/routes"
)

// Injectors from wire.go:

func NewApplication() *gin.Engine {
	validator := utils.NewValidator()
	db := infrastructures.NewPostgresConnection()
	userRepository := repositories.NewUserRepository(db)
	passwordResetTokenRepository := repositories.NewPasswordResetTokenRepository(db)
	oauthService := services.NewOauthService(db, userRepository, passwordResetTokenRepository)
	oauthHandler := handlers.NewOauthHandler(validator, oauthService)
	authService := services.NewAuthService(db, validator, userRepository, passwordResetTokenRepository)
	authHandler := handlers.NewAuthHandler(validator, authService)
	engine := routes.InitRoutes(oauthHandler, authHandler)
	return engine
}

// wire.go:

var userModule = wire.NewSet(repositories.NewUserRepository)

var oauthModule = wire.NewSet(services.NewOauthService, handlers.NewOauthHandler)

var authModule = wire.NewSet(services.NewAuthService, handlers.NewAuthHandler)
